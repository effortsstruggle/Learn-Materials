1完成mysrcmp函数。原型
int strcmp(char* str1,char* str2);
	str1>str2  返回 1
	str1=str2  返回0
	str1<str2  返回 -1



2完成一个函数，实现 统计数组中奇数的个数 ，并返回。
	int calc(int buf[],int ilen);


3完成实现atoi
   
	int atoi(char* str);
	将str字符串转换为整型
   拓展：实现atof（不作要求完成）


4、分析输出，为什么？（常见笔试题）
   signed int num1=-10;
   unsinged int num2=10;
   if(num1>num2)
	cout<<"AAA"<<endl;
   else
	cout<<"BBB"<<endl;

  输出：AAA
   有---》无符号


二维数组：由n行一维数组成   
	定义： 
		类型  数组名[n][m]
			
	初始化：定义同时赋值
		int buf[2][3]={{1,2},{3,4},{5,6}};
		int buf[2][3]={1,2,3,4,5,6};
		PS:未被初始的值为0
		
	引用：下标法、指针法
		buf[行][列]
		PS:行与列的下标从0开始
		
	PS:1、数组名是第一行的首地址  
		
			第二行的首地址是buf[1]，     
			就是buf[0][1],将buf[0]看成首地址，把二维数组看成一个一维数组


二维数组与指针：

	二维数组的数组名+n=下n行首地址
	

	定义二维数组指针：
		类型 (*数组名)[m]；//m代表列
		int (*pd)[4];  
			ps:要想找到元素的具体位置，必须清楚  列的坐标

	行指针：(二维数组名  二维指针)
		行指针+n   指向n行
	列指针：（一维数组名  一级指针）
		列指针+n   指向n列
		
	PS:想要获取内容，必须获取列地址


程序=代码区+数据区
	代码区：存放函数的
	
	
函数指针：就是函数的入口地址	

	  定义函数指针变量:
			类型 (*变量名)(形参列表)= 函数名（地址）
	
	函数名就是该函数的入口地址----》 函数名，是一个地址
	
		int (*指针名)(形参列表);
	
调用函数：
	1静态调用：
		函数名()
	  确定：在编译器编译时确定
		
	2、动态调用：在运行时才能确定调用哪一个函数。
		指针(实参);
			函数指针：
				定义函数指针变量：
					返回类型 (*指针变量名)(形参)




断言：assert(条件)：形参为指针是，最好加上断言，防止传入空指针	（!=NULL）
	
		assert.h
		注：条件为假，则输出提示


字符数组：
	


明天课程：
	地址+n    向右移n个单位
	地址-地址 得到两地址之间的元素个数

要求：
	1、将今天的刷一次，再将今天的案例和讲过的练习题刷一次
	2、复习：数组
	

明天默写：
		strlen_lf   strcmp_lf  strchr_lf
数据区：（生命周期）
	1、栈（动态）：auto 或 形参（当函数运行时即分配空间，函数结束时则释放）
	2、静态		 ：static变量或全局变量（程序运行就已经分配空间，程序运行结束则释放）
	3、堆区		 ：程序员空间
	
一、静态成员变量,静态成员函数 作 类成员
	1.静态变量作成员变量：
		1、定义
			class 类
			{
				...
				static 类型 变量名; 
				...
			};
		PS：由于static变量是静态区变量，在程序运行时就已经分配，所以构造器无法分配。
		
		2、初始化：只能在类外初始化
		类型  类名::变量名=值
		
		3、引用：
			1、对象.静态成员变量；
			2、类::静态成员  
		
	
	
	2.静态成员函数：	1、不仅属于类，2还属于对象
		class 类名
		{
			...
			static 返回类型  函数名(...)
			{
				...
			}
			...
		};

		//访问：
		对象.函数名()
		类::函数名()
		
		PS:注意在静态函数中不能使用this
	
二、常成员变量,常成员函数
const:
	常量变量：const 
		const int a=100;  
		PS：由于const常变量不能修改变量，所以必须初始化
		
        int a=100;
        int b=200;
	常指针变量：不能通过指针修改指向的内容，可以修改指针变量的内容
			//const int* pa=&a;
			//修改指针变量的空间
			//pa=&b;  //对
			//修改指针指向的空间
			//*pa=200;  //error:

	指针常变量:不能修改pa的内容，但可以通过pa修改指向的内容
			int* const pa=&a;
			//修改指针变量的空间
			//pa=&b; error
			//修改指针指向的空间
			*pa=200;

	常指针常变量
			const int* const pb=&a;
			//*pb=100;
			pb=&b;


常成员变量:(只能有构造器初始化列表初始化)
	class 类名
	{
	//C++只有构造器才能初始化
		类名():常量变量名(值)
		template<typename T1,typename T2>
		...
		const 类型 常量变量名;
		...
	};
	PS:由于常变量必须初始化，所以类常成员变量的初始化  由构造器的初始化列表决定 
	
	
常成员函数：在该函数中只能访问类中成员，不能修改类中成员（只是起了一个限定（不能修改）作用）
	class 类
	{
		...
		返回类型 函数名（）const 
		{
			
		}
		...
	};

Ps:常成员函数只是不能修改类中的成员,但是可改变它自己内部的变量

三、共用体和枚举
	共用体（联合体）：也是一个复杂类型（跟结构体类似），所有成员都共同一个空间（最大成员的字节，且是4的倍数）
	union 类型名
	{
		...
	};
	 //定义联合体变量
		union 类型 变量名;



	枚举：
	  定义枚举类型
		enum 枚举类型{值名1=0,值名2,值名3...};
		
		枚举类型其实是整型它的作用：
			一是让数值看起来更直观
			二是圈定一个范围,是数值被限定在这个范围中
			
	  定义枚举变量
		enum 枚举类型  变量名=值名;
		
		PS:值名必须来自 定义 枚举值。










	
		
程序=数据+算法
数据：
	1、作用域  ：（引用一个变量时，必须存在作用域）
		局部：在函数内定义的（只能在函数内引用变量）
		全局：在函数外定义的（在文件内）
	2、生命周期：
		栈区：auto（在函数内不加static的变量）,形参列表
			当函数调用时分配空间，函数结束时释放空间
			
		静态区：static变量，全局变量
			程序运行时就已经分配，程序结束时释放
			
			
		堆区：程序员空间（1当程序调用malloc或者c++中new运算符时申请空间，2、当程序当调用free或者c++中delete运算符时，释放空间）
			
			
		C语言：
		
			申请堆区： void* malloc(size)
				返回值：申请堆区的地址(由于申请空间类型不明确，所以返回空指针)
			
		PS:1必须释放，否则会出现内存泄漏
		   2一个堆区不能释放两次
		   3、堆区的初值为0
		   
		   
		   
		(*)通过ｍalloc申请各种类型堆区
			类型* 指针=malloc(长度)
			 
			申请整型空间
				int* p = (int*) malloc(sizeof(int));
			申请数组空间:申请4个元素的int数组空间，须知道列
				int* p=(int*) malloc(sizeof(int)*4);
				
					//数组必须一个一个赋值，不能整体赋值
				
			申请二维数组空间  （行列）
				int (*p)[5]=(int (*)[5]) malloc(sizeof(int)*4*5);
			申请结构体空间
			struct people* p=(struct people*) malloc(sizeof(struct people));

	
			
空指针类型：没有类型，只是作用记录地址使用。（万能地址 ） 
	void* 
	
	PS：1、(32位系统:处理最大的地址是2^32-1)所有的指针变量都占4Byte 
	
		2、空指针不能运算（不明确类型）,若使用时，必须强转。
		
		

IO:
	1、标准IO：（对象：键盘/屏幕）从键盘上输入内容，将计算机内容输出到屏幕上。
		getchar
		putchar
		
		gets
		puts
		
		
		scanf     
		printf  

	2、文件IO：	(对象：文件)
		文件：（信息在系统中是以文件为存储单位）是有限的信息的集合
		
		文件的组成：文件名+路径
		
		
		文件的分类：
			1、文本文件  ：ASCII码序列
				123456
				文件：[49][50][51][52][53][54][EOF]  //EOF: 读取文件结束的标志
				
			2、二进制文件：将计算机中数据原形保存到文件中
				short a=10; //[00000000][00001010]
				文件：[00000000][00001010]		
		
	3、文件的操作：
			cpu是无法操作硬盘中的文件（通过内存中转）；
			cpu--> 内存  --》 硬盘
		
		1、打开文件:
			FILE *fopen(const char *path, const char *mode);
			形参： 
				path:路径
				
				mode:操作的方式
				1、文本文件  ：
					"w":只写打开，若文件不存在，则创建一个新的。若存在则截断为0（清空）
					"r"：只读打开，若文件不存在，则打开失败 //打开时：位置开头
					"a"：追加打开（添加到文件末尾）：//若文件不存在，则创建,存在则打开，文件读写位置在末尾
					"w+"：读写打开，若文件不存在，则创建一个新的。若存在则截断为0（清空）
					"r+" 读写打开，若文件不存在，则打开失败
					"a+" 以读写追加打开（添加到文件末尾）
					
					
				2、二进制文件：
				
			返回值：成功返回文件的地址   打开失败：NULL
			
		2、操作
			文件方式：
				输出：
					fputc(int,FILE*)        输出一个字符到文件中
					fputs(char*,FILE*)  	输出一串字符到文件中
					fprintf(FILE*,char* formatter,...);
					
				输入：从文件中读取内容
					int fgetc(FILE*);//获取一个字符
					fgets(char*,FILE*);//获取一串字符
					fscanf(FILE,char* format,...(块空间元素‘&’));
					
					feof(file):返回-1
				修改文件的读写位置：
					int fseek(FILE *stream, long offset, int whence);
					形参：	
						1、offset 偏移量    -n 向左往  +n往右移
						2、whence：位置  
							  SEEK_SET 开对
							  SEEK_CUR 当前
							  SEEK_END 末尾
							  
					ftell(FILE)： 获取读写位置
		
		
		3、关闭：关闭之前将缓冲区的IO进行收尾
				fclose(FILE);
		
		
		
		
		*文件的读写位置：文件IO中都有一个读写位置，是用于指向当前的读写位置
			1、文件打开时（除了"a"），读写位置在开头
			2、每读或写一块内容，读写位置就后移一块位置
			
			
			
		
			
		
练习：
		1、完成个班级学生信息写入到student.txt
		2、输出
		3、查找某同学是否存在，存在输出的信息。
		
		
		
		
		
		
		
		
		
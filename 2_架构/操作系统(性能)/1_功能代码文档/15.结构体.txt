定义变量
初始化变量
引用变量

基本类型：整型，字符型，浮点型

1.结构体：自定义数据类型（复杂类型）

	定义新的结构体类型(申请一个复杂类型，并不是定义，所以并没有分配空间)
		struct 类型名
		{
			 类型 属性变量1;
			 。。。
		};
		
	ps：只有函数指针，没有函数


	三句话：
	
1.定义结构体变量：
			struct 类型名 变量名;
			
			eg:struct people p;
			
			PS:在C++ 语言中  struct是可以省略


		2.初始化：定义变量同时赋值
			struct 类型名 变量名={...};
				eg:struct people p={"lifei",100};
				
		
		3.引用：
			1、不能整体引用，只能单个引用成员
				变量.成员      
			2、但能整体赋值。
				struct people p2={1001,"wang"...}；
				p=p1


		字节对齐：为了提高速度(浪费空间)					
			共享字节：
					如果上一个元素分配的（空闲）填充空间，就共享给下一个元素使用（下一个元素类型是不能大于填充空间 ）  
						


2.结构体数组：（一维数组，二维数组）
		定义： struct 类型 数组名[长度]={{}，{}。。。}
		
		
		引用：下标法  指针
			数组名[i].成员
			
			指针->成员
			struct people* p =&p1;
	

嵌套结构体：
		struct 类型1
		{
			...
		};
		struct 类型
		{
			struct 类型1  变量名;
			...
		};
	
	
		PS：结构体成员可以是任意的类型.
		

eg:
		//人类
		struct people
		{
				//变量：类型 变量名
				int id;
				char name[10];
		};
		struct student
		{
				//嵌套结构体
				struct people msg;//个人信息
				int score;//分数
		};
		int main()
		{
				//定义复杂结构体变量：
				student ly={{1001,"liuying"},100};
		}


		指针->成员     空间内容.成员
		
		PS:注意：不能整体引用，只能引用成员（基本类型）
					可以整体赋值
					
					
		总结：变量名.成员   指针->成员 


		   
指针与结构体之间的联系

			定义结构体指针变量：
			
				复杂类型* pl=  存储地址;



typedef：已知类型重命名(
						基本类型：整型，浮点型，字符型
						复杂类型：结构体（自定义数据类型）
						)
						
	1、基本类型
		typedef int INT
	2、函数指针类型
		typedef int (*别名)(int,int);
	3、对结构体类型取别名
		typedef struct people p ；
	4、指针类型
		
		
		
联合体：也是一个复杂类型






字符串操作函数
	头文件：string.h
	1、求长度  int strlen(char*)
	2。比较字符串 int strcmp(char* ,char*);
	3 查找字符  strrchar  strchr
	4、拷贝字符串：
		char* strcpy(char* des,char* src);	//将src拷贝到des中 














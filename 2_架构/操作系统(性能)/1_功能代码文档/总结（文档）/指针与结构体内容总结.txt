1.指针
	定义指针
	
	初始化指针
	
	引用指针

	
		指针变量
		
		指针数组 ： 存储一串的地址
		
		指针与函数的关系
			//指针做形参(看到变量名，引用自身空间的内容)
				
			//数组做形参
			
			//指针做返回值
			
		
		指针函数
			int (*fun)(形参列表)=add;
				//函数名，就是函数的入口地址
		指针函数数组：
		
		
		二维数组
			int buf[3][4]={{，，，},{，，，},{，，，}};
		
		一维指针
			char buf[]={......};
			char* p=buf;
		二维指针  也称为  数组指针(也称为行指针)--》一个指针指向一个数组
			int buf[3][4]={{},{},{}};
			int (*p)[4]=buf;

		二级指针
	
	
2.结构体（复杂类型）
	
	定义结构体
	初始化结构体
	引用结构体
	
		定义结构体	
		结构体变量
		结构体数组
		结构体指针
		
		函数 与 结构体
		
		重命名类型：（typedef: 对已知类型重命名）
		
		
		
		重点:
	
		* 指针变量引用指针地址的长度  ： 由类型决定的（如int* pa     *pa：引用4byte的长度） 

		int* p=1;
		p---->引用p的自身空间
		*p----》引用p的 指向空间 内容 （指向的空间（地址）必须存在(分配)）

		3.字符串(string)

		就是一串字符，表达式结果为 地址，地址空间都是常量空间（不能被修改）；

		char* p="hello";  p存储的hello的首地址， p 代表 ‘h’的地址  
							警告
	
		char* p="hello"; //可以引用，但不能修改（常量空间）

字符数组：也是一连串的字符变量空间，数组名就是首地址

			 字符数组赋值时，只能逐个空间赋值	 ：  因为数组名是是首地址



	函数：
	


	
	
	




		
		
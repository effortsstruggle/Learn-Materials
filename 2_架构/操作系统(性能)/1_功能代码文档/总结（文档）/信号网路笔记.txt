进程：
	IPC通信:
		1.管道
		2.信号（异步模式）:软中断信号 ，用于通知进程发生了 异步事件（如：键盘上有按键被按下 ctrl+c），
			在软件层上
				突然发生(进程不知道信号什么时候到)
				Ps:
					1、信号是IPC中 唯一  的异步通信模式
					2、一个进程不必要做任何等待 一个信号的到来
				查看信号:
					Linux下有64中信号（不同信号代表不同事件）
					
						分为2种：
							前面32中  不可靠信号（不知道次数(点击多少次)，和时间） ---只有一个int型 完成  32bit位  
																						每一个信号对应一个位
									产生---递达（）
							
							后面32中  可靠信号  					 			   ---使用链表完成的
					
					
				一、信号处理动作：收到信号后的  处理动作
					signal(信号，处理方式)
						处理方式: SIG_IGN：忽略处理
								  SIG_DFl:信号处理
						
						1.信号忽略处理:收到信号， 但不处理SIG_ING
							
						2.信号默认处理:系统为每个信号都做出了默认处理(一般默认处理 都是退出进程)
							Ps:信号阻塞(屏蔽)和信号忽略有本质区别
						3.自定义处理
				
				二、信号处理流程:
					1.信号诞生：由软硬件产生（ctrl+c(键盘 硬件) 管道破裂 （软件））
							
					2.信号注册（signal(信号，处理方式)）
					
					3.执行和注销
					
					
					
					 1) SIGHUP ：终端挂起	 			2) SIGINT ctrl+c  			3) SIGQUIT 键盘退出键（ctrl+\）	 	4) SIGILL 非法执行   											5) SIGTRAP
					 6) SIGABRT：调用abort函数 进程退出 7) SIGBUS	 				8) SIGFPE：浮点数异常	 			9) SIGKILL  干掉进程（只能默认处理，不能忽略，要不然流氓进程）	10) SIGUSR1
					11) SIGSEGV							12) SIGUSR2：用户自定义信号	13) SIGPIPE							14) SIGALRM:闹钟信号  											15) SIGTERM
					16) SIGSTKFLT						17) SIGCHLD：一个进程终止或者停止时，将SIGCHLD信号发送给其父进程，按系统默认将忽略此信号				18) SIGCONT							19) SIGSTOP														20) SIGTSTP
					21) SIGTTIN							22) SIGTTOU					23) SIGURG							24) SIGXCPU														25) SIGXFSZ
					26) SIGVTALRM						27) SIGPROF					28) SIGWINCH						29) SIGIO														30) SIGPWR
					31) SIGSYS							34) SIGRTMIN				35) SIGRTMIN+1						36) SIGRTMIN+2													37) SIGRTMIN+3
					38) SIGRTMIN+4						39) SIGRTMIN+5				40) SIGRTMIN+6						41) SIGRTMIN+7													42) SIGRTMIN+8
					43) SIGRTMIN+9						44) SIGRTMIN+10				45) SIGRTMIN+11						46) SIGRTMIN+12													47) SIGRTMIN+13
					48) SIGRTMIN+14						49) SIGRTMIN+15				50) SIGRTMAX-14						51) SIGRTMAX-13													52) SIGRTMAX-12
					53) SIGRTMAX-11						54) SIGRTMAX-10				55) SIGRTMAX-9						56) SIGRTMAX-8													57) SIGRTMAX-7
					58) SIGRTMAX-6						59) SIGRTMAX-5				60) SIGRTMAX-4						61) SIGRTMAX-3													62) SIGRTMAX-2
					63) SIGRTMAX-1	64) SIGRTMAX	

				发送信号:
					kill()
					raise()//向本进程发送一个信号
					
				信号递达:
					实际执行 信号的处理动作  被称为  信号递达
				
				信号未决:从产生  ---  递达之间的状态
					Ps：进程可以选择阻塞(屏蔽)某个信号，被阻塞的信号保持在信号的未决
						（阻塞和忽略有区别），
				
				每个信号都有
							
					block(阻塞,屏蔽位) 1（屏蔽） 和 0 （未屏蔽），32位 
					
					pending(未决) 	1 和 0  ，32位		
					
					hand：pfuntion * buf[32];处理方式
					
				屏蔽信号集：
				
					1.定义信号屏蔽集:
					
					
		
			定时器（不会阻塞，一旦设置立刻返回）:
				unsigned int alarm(unsigned int seconds);
				作用:设置seconds闹钟,当设置时间达到，则产生一个SIGALRM信号
				
				
			挂起函数:等待一个信号到来就唤醒
					pause();
				
//进程描述符							
struct task_struct
{
	int pid;
	struct file_struct* file[65535];
	int signal;

};



IPC(进程间)通信：存在于程序之间的通信
		

网路通信（socket）：不同地域之间的主机通信
	目标:资源共享()

网络协议:双方约定的规则,(为了解析数据)

		Ps:网络不允许坏的数据包在网络中通信

已被分配
.255 : 局域网（本部网络）
.0 :	

	电脑只能接收电流信号：

		发送方			接收方
ISO: 国际标准协议 （统一协议）
	
7.		应用层						应用层
6.		表示层						表示层
5.		会话层						会话层
4.		传输层						传输层
3.		网络层						地址（网络层）		
		
2.		数据链路层（MAC地址）		数据链路层			
							
1.		物理层						物理层	


TCP/IP：协议，当今因特网协议（当今国际标准协议）

			有的叫4层（1.2,合体，数据链路层），有的是5层（物理层，链路层）


5.6.7层		应用层								5.6.7层		应用层
			
			传输层										传输层
				
			网路层										网路层

1、2层    物理链路层(数据链路层，网络接口层)    物理链路层(数据链路层，网络接口层)




IP地址:标记此主机在网络上的位置
	
		ipv4（现已枯竭):4段点分十进制 		ipv6
		
		IP地址组成: 网络号（独一无二、地址） + 主机号
					
					网络号:此主机所在的网络位置
					
			
					主机号:此主机所在此网络下的某台主机
		IP地址划分:
			A:[网络号] [[主][机][号]]  ---- 国家
					必须0开头[0...]
						1		1.0.0.0 	1.255.255.255
						127
						1-127
			B	[[网络][号]]	[[主机][号]]  
					必须[10]
					最小:100000.00000
					最大:101111.11111
						128.0  - 191.255
			C	[[网][络][号]] [主机号]
					110 开头
					
					192.0.0.0  (被预留了)
					192.0.0  --  223.255.254
						
					255(被预留了)
				
			D（多播地址,组播地址）
				1110 开头
				224.
			
			E

三要素:
	IP地址:标记此主机在网络上的位置

	MAC地址：标记网卡的唯一ID

	端口号:程序的网络标识
		128以下被预留, 80:HTTP 
		
网络字节序（Endian：字节序）:网络统一规定的网络字节序列
	
Endian：字节序     数据在存储器中的存放顺序
	
	
路由选择协议：
	


//传输控制层:
	UDP:面向无连接，不安全，不可靠的传输协议(效率很高)
	TCP:面向连接，安全，可靠的传输协议(效率很低)  ： 

网络编程模式:
	c/s:	client/server
		Client客户端：发送请求方
		server服务器端:	接收客户端的请求，并响应处理
		
	b/s:	browser/server

UDP通信（数据报）：
	
设备:一切设备皆文件  -->  操作文件：打开 操作 关闭
		服务器							客户端
	
	1.创建套接字 
		int socket()
	2.绑定套接字（绑定端口号）：
		bind()
	
	3.发/收 信息	
	
	4.关闭
	
	
	
//宏  高位存储（Big Endian）  还是 低位存储（Little Endian）


概念:
	一、字节序     数据在存储器中的存放顺序

	简单来讲所谓的
		大端存储就是将高字节序的内容存在低地址处，低字节内容放在高地址处
		小端存储就是高字节内容放在高地址处，低字节内容放在低地址处
		
		
		例如： int n=1；

它的原码，反码，补码都是 00000000 00000000 00000000 00000001

https://blog.csdn.net/oqqHuTu12345678/article/details/82823890


它在计算机中的小端存储字节序为  00 00 00 01

              大端存储字节序为 01 00 00 00
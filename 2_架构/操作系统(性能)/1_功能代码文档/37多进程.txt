程序：有限指令的集合，存放在文件中。静态

进程:正在运行的程序，系统为该进程分配空间
struct task_struct  （）
{
	int pid;//标识
	struct file_struct* buf[65535];//文件描述符
	...
};

1获取PID:
	int getpid ()；//获取当前进程
	int getppid();//获取父进程
	
2、状态：
	运行：万事具备，也获得东风

	就绪：万事具备，只欠东风

	阻塞：万事不具备 

	退出：进程退出

3多进程：
	int fork();  拷贝父进程空间一份给子进程
		
	int vfork(): 1.子进程与父进程共享数据段，
	
				 2.保证子进程先运行,在调用exec或exit之前与父进程数据是共享的
				
				3.vfork （）保证子进程先运行，在她调用exec 或exit 之后父进程才可能被调度运行。
							如果在调用这两个函数之前子进程依赖于父进程的进一步动作，则会导致死锁

4、孤儿进程：父进程先于子进程退出。子进程则成为孤儿进程。
			那么孤儿进程的父进程则为1号进程
	
	zombie僵尸进程：子进程退出时，父进程不为子进程善后处理时的状态。
          PS:子进程退出时，有时父进程必须知道子进程的退出状态。

5、 int  wait(int* status)函数  同步函数
	作用：等待子进程退出，并善后处理
	形参：status存储子进程的状态
	
	获取status中的返回值：WEXITSTATUS（status）
	获取是否异常退出状态：WIFEXITED (status)


6/进程退出：
   1、正常退出：先清空缓冲区，。。。最后释放空间
		main 中：return 0;
		
		exit(0);
		_exit:不清空缓冲区,不释放空间   
  
  2、异常退出：直接退了
		运行异常
		

7/进程间的空间：是独立

8/父子进程运行：抢占式
	

练习题：
	0：熟悉
	1？创建4个子进程，分别打印输出“我是1号进程”

	2/多进程拷贝：（子进程只需要lseek移位）
		父进程拷贝前面一半  子进程拷贝后面一半

8/IPC










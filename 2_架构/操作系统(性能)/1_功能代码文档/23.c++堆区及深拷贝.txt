一、堆区：
	C：  malloc与free函数
	C++: new                指针，必须申请空间，否则段错误
		1、申请一个元素空间
			new 类型(值)     
		2、申请一块空间（数组）
			new 类型[长度];  //这就不需要使用，求类型长度，因为类型已经明了（和malloc不同点）
		3.申请一个对象
			new 类名();
		
		delete:
		1、释放一个元素空间
			delete 指针
		2、释放一块空间
			delete[] 指针;
		3.释放对象
			delete 对象;
			

二、拷贝构造器： 编译器会默认添加一个拷贝构造器（*this=s1）,就是浅拷贝
	
	1.定义拷贝构造器:
		people(people& p)
	2.调用拷贝构造器:
		类名 对象2(对象1);
	
	浅拷贝：当对象中没有指针变量时
	
	深拷贝：对象成员中有指针变量或文件流时
			1、先申请空间
			2、再赋值
	

三、析构器:(也是一个特殊函数)对象释放时（对象的生命期结束）， 发起的通知消息，  用于通知程序做释放内存处理（在撤销对象前）。
		
		析构器不能重载
	
	作用：做善后处理(释放堆区，关闭文件。。。)，还可以在最后一次使用对象之后所执行的任何操作
	
	一、定义析构器:
			~类名();
	
	PS：
		1.默认的析构函数什么都不执行（徒有形式）
		2.先构造后析构，后构造先析构，相当于一个栈
	
	
	程序执行析构函数：当变量使用结束时调用析构器
	
		1.如果一个函数中定义了一个对象（假设是自动局部对象），当这个函数被调用结束时，
		  对象应该释放，在对象释放前自动执行析构函数。
		
		2.静态（static）局部对象在函数调用结束时对象并不释放，因此也不调用析构函数
		  只在main函数结束或调用exit函数结束程序时，才调用static局部对象析构函数
		  
		3.全局对象和static对象，调用析构函数时间一样
		
		4.如果用new运算符建立一个对象，当用delete运算符释放该对象时（是 调用该对象的析构函数  来释放对象堆区的）

	main函数结束，调用析构器释放堆区










一、回调函数：当发生某个事件时，系统或其他函数会自动调用我们自己定义的一段函数；(通过函数指针)
	
	是一个通过函数指针调用的函数。	
	如果你把函数的指针（函数的入口地址--》函数名）作为参数传递给另一个函数，
	当这个指针被用来调用其所指向的函数时，这个函数就是回调函数
	
	
	

二、线程：就是轻量级进程。
   为什么不用多进程来实现并发：进程间切换时，需要消耗大量的时间（保存现场,恢复现场），所以用进程实现并发效率低。

	概念:
		1.进程（多个人）：是分配资源的单位，不是执行的单位
		2.线程（一个人多只手）：是执行的单位（是进程的一个资源）,但是线程也会分配一定的空间（1.分配pthread_t(tid号),栈区（局部动态变量空间））
	主次线程:	
		1.主线程：执行main的，每个进程都有一个特殊的线程来执行Main的线程，
		2.次线程：都是进程的一个资源(没有子线程的说法)
		
		Ps:所有线程都是进程的一个资源
		
步骤:		
一、创建线程：
#include <pthread.h>

       int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                          void *(*start_routine) (void *), void *arg);
		形参：thread ID			线程ID--> 
							1.将新线程的ID,存储在线程所指向的缓冲区中，此标识符用于在后续调用其他pthread函数时引用该线程
							
							2.不能为NULL,因为需要将线程id存储起来,*NULL = 100;//段错误
		  
		  attr  	 		线程属性
	      start_rountine 	线程执行函数
	      arg   			传递的参数  ： 用于线程间通信
		  
	  
   PS:1、主线程(结束)退出，进程退出（其他线程都退出）
      
	 2、所有线程都共享进程的空间
	     
	   
二、等待次线程结束(次线程不结束，主线程死等)：
	pthread_join(pthread_t tid,void** arg)
	
			形参:
				arg：获取次线程返回的地址（所以二级指针）
	
	传递参数：
  	 int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                          void *(*start_routine) (void *), void *arg);



任务：
	熟练今天的课程
	1、创建5个次线程，分别打印我是1号线程....
	2、多线程拷贝：主线程拷贝前一半   次线程后一半
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

